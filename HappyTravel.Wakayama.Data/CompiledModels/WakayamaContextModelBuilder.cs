// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable enable

namespace HappyTravel.Wakayama.Data.CompiledModels
{
    public partial class WakayamaContextModel
    {
        partial void Initialize()
        {
            var country = CountryEntityType.Create(this);
            var globalRegion = GlobalRegionEntityType.Create(this);
            var locality = LocalityEntityType.Create(this);
            var localityCountryRelation = LocalityCountryRelationEntityType.Create(this);
            var localityProvinceRelation = LocalityProvinceRelationEntityType.Create(this);
            var localityZone = LocalityZoneEntityType.Create(this);
            var province = ProvinceEntityType.Create(this);
            var provinceCountryRelation = ProvinceCountryRelationEntityType.Create(this);
            var synonym = SynonymEntityType.Create(this);

            CountryEntityType.CreateForeignKey1(country, globalRegion);
            LocalityCountryRelationEntityType.CreateForeignKey1(localityCountryRelation, country);
            LocalityCountryRelationEntityType.CreateForeignKey2(localityCountryRelation, locality);
            LocalityProvinceRelationEntityType.CreateForeignKey1(localityProvinceRelation, locality);
            LocalityProvinceRelationEntityType.CreateForeignKey2(localityProvinceRelation, province);
            LocalityZoneEntityType.CreateForeignKey1(localityZone, locality);
            ProvinceCountryRelationEntityType.CreateForeignKey1(provinceCountryRelation, country);
            ProvinceCountryRelationEntityType.CreateForeignKey2(provinceCountryRelation, province);

            CountryEntityType.CreateAnnotations(country);
            GlobalRegionEntityType.CreateAnnotations(globalRegion);
            LocalityEntityType.CreateAnnotations(locality);
            LocalityCountryRelationEntityType.CreateAnnotations(localityCountryRelation);
            LocalityProvinceRelationEntityType.CreateAnnotations(localityProvinceRelation);
            LocalityZoneEntityType.CreateAnnotations(localityZone);
            ProvinceEntityType.CreateAnnotations(province);
            ProvinceCountryRelationEntityType.CreateAnnotations(provinceCountryRelation);
            SynonymEntityType.CreateAnnotations(synonym);

            AddAnnotation("Npgsql:PostgresExtension:postgis", ",,");
            AddAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,");
            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "6.0.1");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
        }
    }
}
